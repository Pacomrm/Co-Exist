{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport axios, { all } from 'axios';\nimport { useFetch } from '../../services/useFetch';\nimport { useSelector } from \"react-redux\";\nconst API_URL_BASE = \"http://localhost:3000/\";\nconst API_URL = \"http://localhost:3000/projects\";\nconst API_URL_ODS = \"http://localhost:3000/ods\";\nconst API_URL_LOCATIONS = \"http://localhost:3000/locations\";\nconst API_URL_NEEDS = \"http://localhost:3000/needs\";\nexport const projectsSlice = createSlice({\n  name: 'projects',\n  initialState: {\n    allProjects: [{}],\n    allODSs: [],\n    allLocations: [],\n    allNeeds: []\n  },\n  reducers: {\n    loadProjects: (state, action) => {\n      state.allProjects = action.payload;\n    },\n    loadODSs: (state, action) => {\n      state.allODSs = action.payload;\n    },\n    loadLocations: (state, action) => {\n      state.allLocations = action.payload;\n    },\n    loadNeeds: (state, action) => {\n      state.allNeeds = action.payload;\n    }\n  }\n});\nexport default projectsSlice.reducer;\nconst {\n  loadProjects,\n  loadODSs,\n  loadLocations,\n  loadNeeds\n} = projectsSlice.actions;\nexport const selectAllProjects = state => state.projects.allProjects;\nexport const selectAllODS = state => state.projects.allODSs;\nexport const selectAllLocations = state => state.projects.allLocations;\nexport const selectAllNeeds = state => state.projects.allNeeds;\n\n/* Action to load all projects from DataBase*/\nexport const loadAllProjects = () => {\n  var _s = $RefreshSig$();\n  return _s(async dispatch => {\n    _s();\n    const allProjectsRes = await useFetch(API_URL);\n    dispatch(loadProjects(allProjectsRes.data));\n  }, \"WM4OL7CqgzjgXHJL6SXd6kRTA8w=\", false, function () {\n    return [useFetch];\n  });\n};\n/*Action to load all needs*/\nexport const loadAllNeeds = () => {\n  var _s2 = $RefreshSig$();\n  return _s2(async dispatch => {\n    _s2();\n    const allNeedsRes = await useFetch(API_URL_NEEDS);\n    dispatch(loadNeeds(allNeedsRes.data));\n  }, \"WM4OL7CqgzjgXHJL6SXd6kRTA8w=\", false, function () {\n    return [useFetch];\n  });\n};\n/*Action to load all ods*/\nexport const loadAllODSs = () => {\n  var _s3 = $RefreshSig$();\n  return _s3(async dispatch => {\n    _s3();\n    const allODSRes = await useFetch(API_URL_ODS);\n    dispatch(loadODSs(allODSRes.data));\n  }, \"WM4OL7CqgzjgXHJL6SXd6kRTA8w=\", false, function () {\n    return [useFetch];\n  });\n};\n/*Action to load all locations*/\nexport const loadAllLocations = () => {\n  var _s4 = $RefreshSig$();\n  return _s4(async dispatch => {\n    _s4();\n    const allLocationsRes = await useFetch(API_URL_LOCATIONS);\n    dispatch(loadLocations(allLocationsRes.data));\n  }, \"WM4OL7CqgzjgXHJL6SXd6kRTA8w=\", false, function () {\n    return [useFetch];\n  });\n};\n\n/*One function to select projects according to the filter*/\nexport const loadProjectsByFilter = (filter, subFilter) => async (dispatch, getState) => {\n  console.log(\"filter \", filter);\n  console.log(\"subFilter \", subFilter);\n  const actualProjects = getState().projects.allProjects;\n  let filteredProjects = [];\n  let activeMainFilter = '';\n  activeMainFilter = Object.entries(filter).filter(_ref => {\n    let [val, i] = _ref;\n    return i === true;\n  });\n  console.log(\"projects \", actualProjects);\n  try {\n    actualProjects.map(project => {\n      const keys = Object.keys(project);\n      const values = Object.values(project);\n      console.log(\"inside map \", keys.includes('filter'));\n      if (keys.includes('filter')) {\n        console.log(\"yes\", values);\n        // filteredProjects.push(project);\n      }\n    });\n\n    // let categoryFilter = [];\n    // categoryFilter = Object.entries(filter).filter( ([val,i]) => i === true);\n    // let filterFinal = categoryFilter[0][0];\n    //\n    // const allProjects = await axios.get(`${API_URL}`);\n    // let projectsFiltered =[];\n    // allProjects.data.map( project => {\n    //     project[filterFinal].map( o => {\n    //         if(o === name){\n    //             projectsFiltered.push(project);\n    //         }\n    //     })\n    // })\n    // dispatch(loadProjects(projectsFiltered));\n  } catch (e) {\n    return console.error(e.message);\n  }\n};\n\n/*Action to get projects by ODS*/\nexport const loadProjectsByLocation = locationName => {\n  return async (dispatch, getState) => {\n    const actualProjects = getState().projects.allProjects;\n    console.log(actualProjects);\n    let filteredProjects = [];\n    actualProjects.map(project => {\n      console.log(project.location);\n      if (project.location === locationName) {\n        filteredProjects.push(project);\n      }\n    });\n    dispatch(loadProjects(filteredProjects));\n  };\n};","map":{"version":3,"names":["createSlice","axios","all","useFetch","useSelector","API_URL_BASE","API_URL","API_URL_ODS","API_URL_LOCATIONS","API_URL_NEEDS","projectsSlice","name","initialState","allProjects","allODSs","allLocations","allNeeds","reducers","loadProjects","state","action","payload","loadODSs","loadLocations","loadNeeds","reducer","actions","selectAllProjects","projects","selectAllODS","selectAllLocations","selectAllNeeds","loadAllProjects","_s","$RefreshSig$","dispatch","allProjectsRes","data","loadAllNeeds","_s2","allNeedsRes","loadAllODSs","_s3","allODSRes","loadAllLocations","_s4","allLocationsRes","loadProjectsByFilter","filter","subFilter","getState","console","log","actualProjects","filteredProjects","activeMainFilter","Object","entries","_ref","val","i","map","project","keys","values","includes","e","error","message","loadProjectsByLocation","locationName","location","push"],"sources":["/Users/mrm/Documents/TECH/React/Redux/Co-exist/react-express-app/client/src/features/projects/projectSlice.js"],"sourcesContent":["import {createSlice} from '@reduxjs/toolkit';\nimport axios, {all} from 'axios';\nimport {useFetch} from '../../services/useFetch';\nimport {useSelector} from \"react-redux\";\n\nconst API_URL_BASE = \"http://localhost:3000/\";\nconst API_URL = \"http://localhost:3000/projects\";\nconst API_URL_ODS = \"http://localhost:3000/ods\";\nconst API_URL_LOCATIONS = \"http://localhost:3000/locations\";\nconst API_URL_NEEDS = \"http://localhost:3000/needs\";\n\nexport const projectsSlice = createSlice({\n    name: 'projects',\n    initialState: {\n        allProjects: [{}],\n        allODSs:[],\n        allLocations:[],\n        allNeeds:[],\n    },\n    reducers: {\n        loadProjects: (state, action) => {\n            state.allProjects = action.payload;\n        },\n        loadODSs: (state, action) =>{\n            state.allODSs = action.payload;\n        },\n        loadLocations: (state, action) =>{\n            state.allLocations = action.payload;\n        },\n        loadNeeds: (state, action) =>{\n            state.allNeeds = action.payload;\n        }\n    },\n})\n\nexport default projectsSlice.reducer;\nconst {loadProjects, loadODSs, loadLocations,loadNeeds} = projectsSlice.actions;\nexport const selectAllProjects = (state) => state.projects.allProjects;\nexport const selectAllODS = (state) => state.projects.allODSs;\nexport const selectAllLocations = (state) => state.projects.allLocations;\nexport const selectAllNeeds = (state) => state.projects.allNeeds;\n\n/* Action to load all projects from DataBase*/\nexport const loadAllProjects = () => async dispatch => {\n    const allProjectsRes = await useFetch(API_URL);\n    dispatch(loadProjects(allProjectsRes.data));\n}\n/*Action to load all needs*/\nexport const loadAllNeeds = () => async dispatch => {\n    const allNeedsRes = await useFetch(API_URL_NEEDS);\n    dispatch(loadNeeds(allNeedsRes.data));\n}\n/*Action to load all ods*/\nexport const loadAllODSs = () => async dispatch => {\n    const allODSRes = await useFetch(API_URL_ODS);\n    dispatch(loadODSs(allODSRes.data));\n}\n/*Action to load all locations*/\nexport const loadAllLocations = () => async dispatch => {\n    const allLocationsRes = await useFetch(API_URL_LOCATIONS);\n    dispatch(loadLocations(allLocationsRes.data));\n}\n\n/*One function to select projects according to the filter*/\nexport const loadProjectsByFilter = (filter, subFilter) => async (dispatch, getState) => {\n    console.log(\"filter \",filter);\n    console.log(\"subFilter \",subFilter);\n    const actualProjects = getState().projects.allProjects;\n    let filteredProjects =[];\n    let activeMainFilter = '';\n    activeMainFilter = Object.entries(filter).filter( ([val,i]) => i === true);\n    console.log(\"projects \",actualProjects);\n    try{\n        actualProjects.map( project => {\n\n            const keys = Object.keys(project);\n            const values = Object.values(project);\n            console.log(\"inside map \",keys.includes('filter'));\n            if(keys.includes('filter')){\n                console.log(\"yes\",values);\n                // filteredProjects.push(project);\n            }\n        })\n\n        // let categoryFilter = [];\n        // categoryFilter = Object.entries(filter).filter( ([val,i]) => i === true);\n        // let filterFinal = categoryFilter[0][0];\n        //\n        // const allProjects = await axios.get(`${API_URL}`);\n        // let projectsFiltered =[];\n        // allProjects.data.map( project => {\n        //     project[filterFinal].map( o => {\n        //         if(o === name){\n        //             projectsFiltered.push(project);\n        //         }\n        //     })\n        // })\n        // dispatch(loadProjects(projectsFiltered));\n\n    }catch(e){\n        return console.error(e.message);\n    }\n}\n\n\n/*Action to get projects by ODS*/\nexport const loadProjectsByLocation = (locationName) => {\n    return async (dispatch, getState) => {\n        const actualProjects = getState().projects.allProjects;\n        console.log(actualProjects);\n        let filteredProjects =[];\n        actualProjects.map( project => {\n            console.log(project.location);\n            if(project.location === locationName){\n                filteredProjects.push(project);\n            }\n        })\n        dispatch(loadProjects(filteredProjects));\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}